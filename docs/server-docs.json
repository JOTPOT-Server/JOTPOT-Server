[
	{
		"title": "server.addCORSRule(protocols, host, pathYes, pathNo, allowAllOrigins, allowOrigins, allowMethods[, allowHeaders, exposeHeaders, allowCredentials, priority, maxAge])",
		"id":"server-addCORSRule",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "Adds a rule that followes the rules set out by the arguments.<br>For more information, please see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">MDN article on CORS</a> for details on how the CORS protocol works.",
		"args": [
			"protocols &lt;Number&gt; Defines which protocol/protocols this rule applys for. 0 for HTTP only, 1 for HTTPS only, or 2 for any.",
			"host &lt;String&gt;|&lt;Array&lt;String&gt;&gt; Host that this rule applys to (including port). If host is an array, it applys to all the hosts in the array.",
			"pathYes &lt;RegExp&gt; The request path must match this RegExp for the rule to apply.",
			"pathNo &lt;RegExp&gt;|null The request path must NOT match this RegExp for the rule to apply. Note that is must also match pathYes. If null, this is ignored.",
			"allowAllOrigins &lt;Boolean&gt; If true, all origins will be allowed to access the resource.",
			"allowOrigins &lt;Array&lt;String|RegExp&gt;&gt; If allowAllOrigins is false, for the origin to be allowed, it will be checked against this array, if it is equal to one of the strings or matches one of the regular expressions, it will be allowed.",
			"allowMethods &lt;Array&lt;String&gt;&gt; Array of allowed methods, the Access-Control-Allow-Methods header will be set to these methods.",
			"allowHeaders &lt;Array&lt;String&gt;&gt; Array of allowed headers, the Access-Control-Allow-Headers header will be set to these headers. Defaults to [].",
			"exposeHeaders &lt;Array&lt;String&gt;&gt; Array of headers that are allowed to be exposed, the Access-Control-Expose-Headers header will be set to these headers. Defaults to [].",
			"allowCredentials &lt;Boolean&gt; If true, the Access-Control-Allow-Credentials header will be set tp true, if false, it will not be set at all. This header should be false unles credentials are required to load the resource. Defaults to false.",
			"priority &lt;Number&gt; priority must be -1, 0 or 1. Rules with a priority of 1 override those with a priority of 0, and those with priority of 0 override those with a proprity of -1. If 2 rules have the same priority, the rule first set takes priority. Only setting 3 values makes the checks much more efficient, which is important as these checks occur for every request. Defaults to 0.",
			"maxAge &lt;Number&gt; Maximum time the CORS response can be cached for by the client (Access-Control-Max-Age header is set to the value). Defaults to -1."
		]
	},
	{
		"title": "server.cache",
		"id":"server-cache",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "Object of function to control the cache and linking system. Docs on the way...",
		"args": []
	},
	{
		"title": "server.callFunc(funcName[, ...arguments])",
		"id":"server-callFunc",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "25A",
		"extra": "",
		"desc": "\tCalls a function in the master process that was set by <a href=\"#server-setFunc\">server.setFunc()</a> in a master extension.\n\t<br>\n\tReturns a promise that resolves with the returned value of the called function.\n",
		"args": [
			"funcName &lt;String&gt; Name of the function to call.",
			"...arguments Arguments to call the function with."
		]
	},
	{
		"title": "server.config",
		"id":"server-config",
		"support": [
			true,
			true,
			false,
			false
		],
		"added": "25A",
		"extra": "",
		"desc": "Object created from the config.json file, used to determine settings during runtime, you can modify it and the changes will be applied.<br>Please note that some changes such as server.config.dataPort are set when JOTPOT Server loads and thus changing them after the initial load will not have any effect. These can however be changed as soon as the extension is loaded as the server is set up after the extensions are loaded.",
		"args": []
	},
	{
		"title": "server.createAccountSystem(options)",
		"id":"server-createAccountSystem",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "Created an account system with the given options, documentation coming soon.",
		"args": [
			"options &lt;Object&gt; Options to create the account system with."
		]
	},
	{
		"title": "server.createURL(opts)",
		"id":"server-createURL",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "Creates a <a href=\"#url-object\">URL object</a> with the given options and returns it.",
		"args": [
			"opts.host &lt;String&gt; The host of the URL.",
			"opts.https &lt;Boolean&gt; Whether or not the URL sould be HTTPS.",
			"opts.path &lt;String&gt; Path of the URL to create the object around.",
			"opts.slashes &lt;Boolean&gt; Whether or not the URL contains slashes after the protocol."
		]
	},
	{
		"title": "server.createURLFromString(url)",
		"id":"server-createURLFromString",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "Creates a <a href=\"#url-object\">URL object</a> as a parsed version of the URL given.",
		"args": [
			"url &lt;String&gt; URL to create the object on."
		]
	},
	{
		"title": "server.getData(request)",
		"id":"server-getData",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "Pre 25A",
		"extra": "From 26A onwards, it is segnificatly more efficient if the request has a content-length header and the amount of data to be recieved is thus known.",
		"desc": "Returns a Promise, this Promise resolves with a Buffer that represents the request body.<br>Note that it only rsolves when the request has ended.",
		"args": [
			"request &lt;Server Request&gt; Request to read the data from."
		]
	},
	{
		"title": "server.getGlobal(variableName[, modifying])",
		"id":"server-getGlobal",
		"support": [
			true,
			true,
			true,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "\tGets a server wide global variable. In the master process, it will resolve instantly.\n\t<br>\n\tReturns a Promise, resolves with the value of the global variable.\n\t<br>\n\tSee also: <a href=\"#server-setGlobal\">server.setGlobal()</a>\n",
		"args": [
			"variableName &lt;String&gt; Name of the variable to retrieve.",
			"modifying &lt;Boolean&gt; Whether or not the variable is being 'modified'."
		]
	},
	{
		"title": "server.getMimeType(filename)",
		"id":"server-getMimeType",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "Returns the mime type of the filename passed.",
		"args": [
			"filename &lt;String&gt; The filename to get the mime type of."
		]
	},
	{
		"title": "server.getUserID(request, response)",
		"id":"server-getUserID",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "Returns the user ID of the user making this request. If the user doesn't already have a user ID it will create one for it.<br>Note that if it creates a new user ID, the set-cookie header will be set, and overwriting it will cause the user ID to be invalidated.",
		"args": [
			"request &lt;Server Request&gt; The request object to get the user ID from.",
			"response &lt;Server Response&gt; The response object to get the user ID from."
		]
	},
	{
		"title": "server.handle(events, callback)",
		"id":"server-handle",
		"support": [
			true,
			true,
			true,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "Setting a handle for an event allows the function to overwrite or add to the default behavior for the event being handled.\n\t<br>\n\tThe function should return undefined, a Boolean or a promise - that should resolve with undefined or a Boolean.\n\t<br>\n\tIf the function returns true or the returned promise resolves true then the server will consider the event 'handled' and thus not continue with the default behavior<br>All the events that can be handles are detailed in the <a href=\"#using-server-events\">Server Events section.</a>",
		"args": [
			"events &lt;Array&lt;String&gt;|String&gt; An event or array of events this function should handle.",
			"callback &lt;Function&gt; Function to call to handle the event."
		]
	},
	{
		"title": "server.handlePage(url, handler, incSearch)",
		"id":"server-handlePage",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "The handler function will be called when the URL that matches the URL string is requested. The function will recieve 2 arguments, request and response - which are for the request that is requesting the page. It may return a boolean or a promise. If a promise is returned, it should resolve with a boolean. If the returned/resolved boolean is true, the server takes the request as handled and thus stops processing it (so it is the handlers responsibility to write the head, body and to end the response). If false is returned/resolved however, the server continues as normal, however taking into account any propertues the habdler may have changed, such as a change in the URL, or an added header value.<br>URL should be in the form 'hostname:port/pathname', if incSearch is true, then the URL may contain a search (so end in ?test=test for example) and that handler will only apply to that search. Also, the port is only included if request.usePortInDirectory is true - see the default behavior for that.",
		"args": [
			"url &lt;String&gt; The URL that this handler applies to.",
			"handler &lt;Function&gt; Function to call when the page is requested.",
			"incSearch &lt;Boolean&gt; Whether or not this URL must match the search of the URL as well."
		]
	},
	{
		"title": "server.handleWebSocket(url, handler, incSearch)",
		"id":"server-handleWebSocket",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26B",
		"extra": "",
		"desc": "The handler function will be called when a websocket upgrade request is recieved for the URL that matches the URL string given. The function will recieve a <a href=\"#wsrequest-object\">wsrequest object</a> as the only argument. See <a href=\"ws-intro\">WebSockets in JOTPOT Server</a>.",
		"args": [
			"url &lt;String&gt; The URL that this handler applies to.",
			"handler &lt;Function&gt; Function to call when an upgrade is requested for the URL.",
			"incSearch &lt;Boolean&gt; Whether or not this URL must match the search of the URL as well."
		]
	},
	{
		"title": "server.implementMethod(method, checker, handler)",
		"id":"server-implementMethod",
		"support": [
			false,
			true,
			false,
			false
		],
		"added": "26A",
		"extra": "",
		"desc": "server.implementMethod allows an extension to implement or reimplement a HTTP method. Calling the function with the checker and handler functions binds it to that method, then, when the server recieves a request using that method, or an options request. The checker function is called with the request and response object. If it returns true (note that a Promise cannot be returned), then this handler is allowed to handle the request. This allows for multiple implementations of the same method, however if each implementation only returns true for say cirtain paths, or a request with sepcific headers, or it reads the CORS headers on the response object, then different implementations can coexist. If the request is an options request, and a single checker for a method has returned true, the rest are not checked and the method listed in the allow header. If it is a request, then the handler function is called with the request and response object. The handler may return a Boolean or a Promise that resolves with a Boolean. If this returned/resolved Boolean is true, the server considers the handler as having handled the request, otherwise, the server continues as usaual, checking links, page handlers, caches and files for a response.",
		"args": [
			"method &lt;String&gt; The method that the checker and handler implement, not case sensitive.",
			"checker &lt;Function&gt; Function that checks if the handler can handle the request/response.",
			"handler &lt;Function&gt; Function to call to handle the method request."
		]
	},
	{
		"title": "server.isHandled(url, incSearch)",
		"id":"server-isHandled",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "Checks if the server has a handler set up for the given URL (in the form host/path), returns a boolean with the result.",
		"args": [
			"url &lt;String&gt; The URL to see if it is handled.",
			"checkLevel &lt;Boolean&gt; Whether or not the search is included."
		]
	},
	{
		"title": "server.isWebSocketHandled(url, incSearch)",
		"id":"server-isWebSocketHandled",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26B",
		"extra": "",
		"desc": "Checks if the server has a handler set up for a WebSocket upgrade request for the given URL (in the form host/path), returns a boolean with the result.",
		"args": [
			"url &lt;String&gt; The URL to see if it is handled.",
			"checkLevel &lt;Boolean&gt; Whether or not the search is included."
		]
	},
	{
		"title": "server.isLearned(url, checkLevel)",
		"id":"server-isLearned",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "Checks if the server has learned behavior for the given URL (in the form host/path), returns a boolean with the result. If check level is 0, the learned value must be the exact URL. Otherwise, it will return true if any search values of the URL or the URL itself is learned.",
		"args": [
			"url &lt;String&gt; The URL to see if it is learned.",
			"checkLevel &lt;Number&gt; If not 0, all searches will be checked."
		]
	},
	{
		"title": "server.limited",
		"id":"server-limited",
		"support": [
			true,
			true,
			true,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "\ttrue if the extension is limited, false if not.\n",
		"args": []
	},
	{
		"title": "server.loadExt(path[, lock])",
		"id":"server-loadExt",
		"support": [
			true,
			true,
			false,
			false
		],
		"added": "Pre 25A",
		"extra": "Notes: Available in limited extensions until 25D",
		"desc": "\tLoads and runs the path given as an extension. If a lock argument is given, that lock will be applied to the extension. Use the <a href=\"#server-lock\">server.lock</a> class to create a valid lock.\n\t<br>\n\tIf the current extension is a master extension, the new extension will be loaded as a master extension and if the extension is a worker extension the new extension will also be loaded as a worker extension, only in the process of the current extension - so to ensure an extension can handle all server events it must be loaded all times its parent extension is loaded.\n",
		"args": [
			"path &lt;String&gt; Path of the file to run.",
			"lock &lt;Lock&gt; Optional lock to apply to the extension."
		]
	},
	{
		"title": "new server.lock([variableSandbox, mode, hosts])",
		"id":"server-lock",
		"support": [
			true,
			true,
			false,
			false
		],
		"added": "25A",
		"extra": "Note: From 25D the server.lock is actually an extension of the actually lock class to prevent it from being overwritten and causing errors.",
		"desc": "\tIf variableSandbox is a string, all server wide global variables set with <a href=\"#server-setGlobal\">setGlobal</a> and retrieved with <a href=\"#server-getGlobal\">getGlobal</a> (or <a href=\"#server-modGlobal\">modGlobal</a>) will be stored within an object named 'variableSandbox' within the standard global object - meaning that the extension cannot access global variables from other extensions with no or different sandboxes, however extensions with no sandbox can access the variables be getting the global variable named 'variableSandbox' - which will be an object of the variables.\n\t<br>\n\tIf host limits are used (so mode &gt;= 1), the extension will only be allowed to handle events for that domain, so if 'hosts' is [\"www.example.com\"], then any handles created by it for \"request\" or similar events will only handle these events for requests to \"www.example.com\", so it will not be allowed to handle events for \"www.jotpot.co.uk\".\n\t<br>\n\tMode can only be 0, 1 or 2 (defaults to 2). If mode is 0, only the variable sandbox will be applied, if mode is 1, variable sandbox will be applied and the host limits will be applied, mode 2 behaves identically to mode 1 right now however new behavior will be added in the future for mode 2.\n\t<br>\n\tThe object created should be used when calling <a href=\"#server-loadExt\">server.loadExt()</a>\n",
		"args": [
			"variableSandbox &lt;String|null&gt; Name of sandbox to use for global variables, or null if no sandbox.",
			"mode &lt;Number&gt; Optional lock to apply to the extension.",
			"hosts &lt;Array&lt;String&gt;&gt; Array of strings this extension is allowed to handle events for."
		]
	},
	{
		"title": "server.modGlobal(variableName)",
		"id":"server-modGlobal",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "25B",
		"extra": "",
		"desc": "\tSame as calling <a href=\"#server-getGlobal\">server.getGlobal(variableName, true)</a>\n",
		"args": [
			"variableName &lt;String&gt; Name of the variable to modify."
		]
	},
	{
		"title": "server.multiPartFormDataParser(request, callback)",
		"id":"server-multiPartFormDataParser",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "25E",
		"extra": "Note: Not currently recomended due to lack of testing.",
		"desc": "Returns a Promise, that resolves when all data has been recieved and parsed.<br>The callback is called whenever a new field is recieved. It is sent with a Data class as the only argument.<br>The Data class is an extension of the standard Node.js readable stream and the data recieved for the current field will be piped out of it. It also has 3 extra popities: name, headers and setup. The name property contains the name of the field, headers contains an object of the parsed headers of the field, and setup is used for internal use.",
		"args": [
			"request &lt;Server Request&gt; Request to parse the data from.",
			"callback &lt;Function&gt; Function to be called with all new data."
		]
	},
	{
		"title": "server.pages",
		"id": "server-pages",
		"support": [
			false,
			true,
			false,
			false
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "\tVariables used for caching, documentation coming soon.\n",
		"args": []
	},
	{
		"title": "server.reloadConfig()",
		"id": "server-reloadConfig",
		"support": [
			true,
			true,
			false,
			false
		],
		"added": "25A",
		"extra": "Note: Not available in the master process until 25D",
		"desc": "Reloads the config.json file.",
		"args": []
	},
	{
		"title": "server.removePageHandler(url, handler, incSearch)",
		"id":"server-removePageHandler",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "The handler function will be called when the URL that matches the URL string is requested. The function will recieve 2 arguments, request and response - which are for the request that is requesting the page. It may return a boolean or a promise. If a promise is returned, it should resolve with a boolean. If the returned/resolved boolean is true, the server takes the request as handled and thus stops processing it (so it is the handlers responsibility to write the head, body and to end the response). If false is returned/resolved however, the server continues as normal, however taking into account any propertues the habdler may have changed, such as a change in the URL, or an added header value.<br>URL should be in the form 'hostname:port/pathname', if incSearch is true, then the URL may contain a search (so end in ?test=test for example) and that handler will only apply to that search. Also, the port is only included if request.usePortInDirectory is true - see the default behavior for that.",
		"args": [
			"url &lt;String&gt; The URL that the handler you want to remove is for.",
			"incSearch &lt;Boolean&gt; Whether or not the handler you want to remove was set with incSearch as true."
		]
	},
	{
		"title": "server.sendCache(file, response, request)",
		"id": "server-sendCache",
		"support": [
			false,
			true,
			false,
			false
		],
		"added": "25E",
		"extra": "Before 26A, the request object was optional as it was only used for logging.",
		"desc": "Exposes an internal function that has been around scince the first release.<br>server.sendCache sends a cache to the response. The cache argument is writen to the response into Node.js's <a href=\"\">response.write</a>, so any type that can be writen to that will be acceptable as the cache argument.<br>The code argument specifies the response code to be sent.<br>Returns a promise that rejects on an unexpected error, and resolves with an array. Index 0 of this array is a boolean, true if the response was sent succesfully and false if not. If index 0 is false, index 1 is the error.<br>Chunked encoding is used unless there are no pipes, in which case the content-length header will be set the the length property of the cache argument.<br>From 26A onwards, the range headers are used, allowing the server to send 206 responses.",
		"args": [
			"file &lt;String&gt; URL to send coresponding cache for.",
			"cache &lt;String&gt;|&lt;Buffer&gt; Data to send.",
			"response &lt;Server Response&gt; The response to send the error to.",
			"request &lt;Server Request&gt; The corresponding request, used for range headers and request tracking.",
			"status &lt;Number&gt; Optional, the status code to send, defaults to 200."
		]
	},
	{
		"title": "server.sendError(code, message, response, request)",
		"id": "server-sendError",
		"support": [
			false,
			true,
			false,
			false
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "Sends a full response based on the error code with the 'errorTemp.jpt' file (from the working directory of the server) with all the error details.",
		"args": [
			"code &lt;Number&gt; HTTP response code to send.",
			"message &lt;String&gt; The message to display on the error page.",
			"response &lt;Server Response&gt; The response to send the error to.",
			"request &lt;Server Request&gt; Optional, the corresponding request, used for logging purposes."
		]
	},
	{
		"title": "server.sendFile(file, response, request)",
		"id": "server-sendFile",
		"support": [
			false,
			true,
			false,
			false
		],
		"added": "25E",
		"extra": "",
		"desc": "Exposes an internal function that has been around scince the first release.<br>server.sendFile sends the correct file as the response to the request. For example if file is 'example.com/hello.html', it will serve './sites/example.com/hello.html'.<br>Returns a promise that rejects on an unexpected error, and resolves with an array. Index 0 of this array is a boolean, true if the response was sent succesfully and false if not. If index 0 is false, index 1 is the error.<br>It pipes through all the correct pipes, including the vars pipe if it should be added for the file given. Chunked encoding is used unless there are no pipes, in which case the content-length header is set to the size of the file being served.<br>From 26A onwards, the range headers are used, allowing the server to send 206 responses.",
		"args": [
			"file &lt;String&gt; URL to send coresponding file for.",
			"response &lt;Server Response&gt; The response to send the error to.",
			"request &lt;Server Request&gt; Optional, the request to get the ID from for improved logging."
		]
	},
	{
		"title": "server.setFunc(functionName, function)",
		"id": "server-setFunc",
		"support": [
			true,
			false,
			true,
			false
		],
		"added": "25A",
		"extra": "",
		"desc": "Sets a function that can be called by any of the workers via <a href=\"#server-callFunc\">server.callFunc()</a>. Each seperate lock gets its own scope for functions - based on the variable scope.",
		"args": [
			"functionName &lt;String&gt; Name of the function to set.",
			"function &lt;Function&gt; The function to assign to the function name."
		]
	},
	{
		"title": "server.setGlobal(variableName, value)",
		"id": "server-setGlobal",
		"support": [
			true,
			true,
			true,
			true
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "\tSets a server wide global variable. In the master process, it will resolve instantly.\n\t<br>\n\tReturns a Promise, resolves when the value of the variable has been set.\n\t<br>\n\tSee also: <a href=\"#server-getGlobal\">server.getGlobal()</a>\n",
		"args": [
			"variableName &lt;String&gt; Name of the variable to retrieve.",
			"value Value to set the variable to."
		]
	},
	{
		"title": "server.unlearn(url, level)",
		"id":"server-unlearn",
		"support": [
			false,
			true,
			false,
			true
		],
		"added": "26A",
		"extra": "",
		"desc": "If level is 0, removes the learning links for the exact URL, otherwise it removes all learing links for that page and all it's searches.",
		"args": [
			"url &lt;String&gt; The URL to see if it is learned.",
			"checkLevel &lt;Number&gt; If not 0, all searches will be removed also."
		]
	},
	{
		"title": "server.vars",
		"id": "server-vars",
		"support": [
			false,
			true,
			false,
			false
		],
		"added": "Pre 25A",
		"extra": "",
		"desc": "\tObject containing global variables to be inserted into pages.\n\t<br>\n\tIf server.vars = {'test1':'hi','test2':'world'}, then in a page served containing the contents '$:::test1:::$ - $:::test2:::$' will be served as 'hi - world'.\n\t<br>\n\tNote that <a href=\"#response-vars\">ServerResponse.vars</a> will also be added this way, with a higher priority (with a lower priority until 25D).\n",
		"args": []
	}
]